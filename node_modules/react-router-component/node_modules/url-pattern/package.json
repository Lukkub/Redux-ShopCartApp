{
  "name": "url-pattern",
  "version": "0.9.0",
  "description": "url-pattern is simple pattern matching and segment extraction for urls, domains, filepaths and other strings",
  "keywords": [
    "url",
    "pattern",
    "matching",
    "routing",
    "route",
    "regex",
    "match",
    "segment",
    "parsing",
    "parser",
    "path",
    "domain",
    "separator"
  ],
  "homepage": "http://github.com/snd/url-pattern",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "contributors": [
    {
      "name": "Andrey Popp",
      "email": "8mayday@gmail.com",
      "url": "https://github.com/andreypopp"
    },
    {
      "name": "Samuel Reed",
      "url": "https://github.com/STRML"
    },
    {
      "name": "Michael Trotter",
      "url": "https://github.com/spicydonuts"
    },
    {
      "name": "Kate Hudson",
      "url": "https://github.com/k88hudson"
    }
  ],
  "bugs": {
    "url": "http://github.com/snd/url-pattern/issues",
    "email": "kruemaxi@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/url-pattern.git"
  },
  "licenses": {
    "type": "MIT",
    "url": "git://github.com/snd/url-pattern/LICENSE"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "0.9.1",
    "coffee-script": "1.9.2"
  },
  "main": "lib/url-pattern",
  "scripts": {
    "compile": "coffee --bare --compile --output lib src",
    "prepublish": "npm run compile",
    "pretest": "npm run compile",
    "test": "nodeunit test/*.coffee"
  },
  "readme": "# url-pattern\n\n[![NPM Package](https://img.shields.io/npm/v/url-pattern.svg?style=flat)](https://www.npmjs.org/package/url-pattern)\n[![Build Status](https://travis-ci.org/snd/url-pattern.svg?branch=master)](https://travis-ci.org/snd/url-pattern/branches)\n[![Dependencies](https://david-dm.org/snd/url-pattern.svg)](https://david-dm.org/snd/url-pattern)\n\n**url-pattern is simple pattern matching and segment extraction for\nurls, domains, filepaths and other strings**\n\n> This is a great little library -- thanks!  \n> [michael](https://github.com/snd/url-pattern/pull/7)\n\n```\nnpm install url-pattern\n```\n\nor\n\n```\nbower install url-pattern\n```\n\n``` javascript\n> var UrlPattern = require('url-pattern');\n```\n``` javascript\n> var pattern = new UrlPattern('/api/users/:id');\n\n> pattern.match('/api/users/10');\n{id: '10'}\n\n> pattern.match('/api/products/5');\nnull\n```\n``` javascript\n> var pattern = new UrlPattern('/v:major(.:minor)/*');\n\n> pattern.match('/v1.2/');\n{major: '1', minor: '2', _: ''}\n\n> pattern.match('/v2/users');\n{major: '2', _: 'users'}\n\n> pattern.match('/v/');\nnull\n```\n``` javascript\n> var pattern = new UrlPattern('(http(s)\\\\://)(:subdomain.):domain.:tld(/*)')\n\n> pattern.match('google.de');\n{domain: 'google', tld: 'de'}\n\n> pattern.match('https://www.google.com');\n{subdomain: 'www', domain: 'google', tld: 'com'}\n\n> pattern.match('http://mail.google.com/mail');\n{subdomain: 'mail', domain: 'google', tld: 'com', _: 'mail'}\n\n> pattern.match('google');\nnull\n```\n\n[lib/url-pattern.js](lib/url-pattern.js) supports [AMD](http://requirejs.org/docs/whyamd.html).  \nif [AMD](http://requirejs.org/docs/whyamd.html) is not available it sets the global variable `UrlPattern`.\n\n[check out **passage** if you are looking for simple composable routing that builds on top of url-pattern](https://github.com/snd/passage)\n\n### make pattern from string\n\n```javascript\n> var pattern = new UrlPattern('/api/users/:id');\n```\n\na `pattern` is immutable after construction\nin the sense that it has no method which changes its state.\nthat makes it easier to reason about.\n\n### match pattern against string\n\nmatch returns the extracted segments:\n\n```javascript\n> pattern.match('/api/users/10');\n{id: '10'}\n```\n\nor `null` if there was no match:\n\n``` javascript\n> pattern.match('/api/products/5');\nnull\n```\n\npattern strings are compiled into regexes at construction.\nthis makes `.match()` superfast.\n\n### named segments\n\n`:id` (in the example above) is a named segment:\n\na named segment starts with `:`.\nthe `:` is followed by the **name**.\nthe **name** must be at least one character in the regex character set `a-zA-Z0-9`.\n\nwhen matching, a named segment consumes all characters in the regex character set\n`a-zA-Z0-9-_ %`.\nthis means a named segment match stops at `/`, `.`, ... but not at `_`, `-` and ` `.\n\n[click here to see how you can change these character sets.](#modifying-the-compiler)\n\nif a named segment name occurs more than once in the pattern string the multiple results\nare stored in an array on the returned object:\n\n```javascript\n> var pattern = new UrlPattern('/api/users/:ids/posts/:ids');\n> pattern.match('/api/users/10/posts/5');\n{ids: ['10', '5']}\n```\n\n### optional segments, wildcards and escaping\n\nto make part of a pattern optional just wrap it in `(` and `)`:\n\n\n```javascript\n> var pattern = new UrlPattern('(http(s)\\\\://)(:subdomain.):domain.:tld(/*)');\n```\n\nnote that `\\\\` escapes the `:` in `http\\\\://`.\nyou can use `\\\\` to escape any character that has special meaning within\nurl-pattern: `(`, `)`, `:`, `*`.\n\n```javascript\n> pattern.match('google.de');\n{domain: 'google', tld: 'de'}\n```\n\noptional named segments are stored in the corresponding property, if they exist:\n\n```javascript\n> pattern.match('https://www.google.com');\n{subdomain: 'www', domain: 'google', tld: 'com'}\n```\n\n`*` in patterns are wildcards and match anything.\nwildcard matches are collected in the `_` property:\n\n```javascript\n> pattern.match('http://mail.google.com/mail');\n{subdomain: 'mail', domain: 'google', tld: 'com', _: 'mail'}\n```\n\nif there is only one wildcard `_` contains the matching string.\notherwise `_` contains an array of matching strings.\n\n### make pattern from regex\n\n```javascript\n> var pattern = new UrlPattern(/\\/api\\/(.*)/);\n```\n\nif the pattern was created from a regex an array of the captured groups is returned on a match:\n\n```javascript\n> pattern.match('/api/users');\n['users']\n\n> pattern.match('/apiii/test');\nnull\n```\n\n### modifying the compiler\n\nfinally we can completely change pattern-parsing and regex-compilation to suit our needs:\n\nlet's make a custom compiler:\n\n```javascript\n> var compiler = new UrlPattern.Compiler();\n```\n\nlet's change the char used for escaping (default `\\\\`):\n\n```javascript\n> compiler.escapeChar = '!';\n```\n\nlet's change the char used to start a named segment (default `:`):\n\n```javascript\n> compiler.segmentNameStartChar = '$';\n```\n\nlet's change the set of chars allowed in named segment names (default `a-zA-Z0-9`)\nto also include `_` and `-`:\n\n```javascript\n> compiler.segmentNameCharset = 'a-zA-Z0-9_-';\n```\n\nlet's change the set of chars allowed in named segment values\n(default `a-zA-Z0-9_- %`) to not allow non-alphanumeric chars:\n\n```javascript\n> compiler.segmentValueCharset = 'a-zA-Z0-9';\n```\n\nlet's change the chars used to surround an optional segment (default `(` and `)`):\n\n```javascript\n> compiler.optionalSegmentStartChar = '[';\n> compiler.optionalSegmentEndChar = ']';\n```\n\nlet's change the char used to denote a wildcard:\n\n```javascript\n> compiler.wildcardChar = '?';\n```\n\nmake url-pattern use our compiler by passing it in as the second argument to the constructor:\n\n```javascript\n> var pattern = new UrlPattern(\n  '[http[s]!://][$sub_domain.]$domain.$toplevel-domain[/?]',\n  compiler\n);\n```\n\n### changelog\n\n#### 0.7\n\ninstead of\n\n``` javascript\nvar urlPattern = require('url-pattern');\nvar pattern = urlPattern.newPattern('/example');\n```\n\nnow use\n\n``` javascript\nvar Pattern = require('url-pattern');\nvar pattern = new Pattern('/example');\n```\n\n#### 0.8\n\nsingle wildcard matches are now saved directly as a\nstring on the `_` property and not as an array with 1 element:\n\n``` javascript\n> var pattern = new Pattern('/api/*');\n> pattern.match('/api/users/5')\n{_: 'users/5'}\n```\n\nif named segments occur more than once the results are collected in an array.\n\nparsing of named segment names (`:foo`) and named segment values now\nstops at the next non-alphanumeric character.\nit is no longer needed to declare separators other than `/` explicitely.\nit was previously necessary to use the second argument to `new UrlPattern` to\noverride the default separator `/`.\nthe second argument is now ignored.\nmixing of separators is now possible (`/` and `.` in this example):\n\n``` javascript\n> var pattern = new UrlPattern('/v:major(.:minor)/*');\n\n> pattern.match('/v1.2/');\n{major: '1', minor: '2', _: ''}\n\n> pattern.match('/v2/users');\n{major: '2', _: 'users'}\n\n> pattern.match('/v/');\nnull\n```\n\n### 0.9\n\nnamed segments now also match `-`, `_`, ` ` and `%`.\n\n`\\\\` can now be used to escape characters.\n\n[made all special chars and charsets used in parsing configurable.](#modifying-the-compiler)\n\nadded [bower.json](bower.json) and registered with bower as `url-pattern`.\n\n### contribution\n\n**TLDR: bugfixes, issues and discussion are always welcome.\nask me before implementing new features.**\n\ni will happily merge pull requests that fix bugs with reasonable code.\n\ni will only merge pull requests that modify/add functionality\nif the changes align with my goals for this package,\nare well written, documented and tested.\n\n**communicate!** write an issue to start a discussion\nbefore writing code that may or may not get merged.\n\n## [license: MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "url-pattern@0.9.0",
  "_from": "url-pattern@~0.9.0"
}
