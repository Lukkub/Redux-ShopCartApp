{
  "name": "redux-devtools",
  "version": "1.1.1",
  "description": "Redux DevTools with hot reloading and time travel",
  "main": "lib/index.js",
  "scripts": {
    "clean": "rimraf lib",
    "build": "babel src --out-dir lib",
    "lint": "eslint src test examples",
    "test": "NODE_ENV=test mocha --compilers js:babel/register --recursive",
    "test:watch": "NODE_ENV=test mocha --compilers js:babel/register --recursive --watch",
    "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive",
    "prepublish": "npm run lint && npm run test && npm run clean && npm run build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gaearon/redux-devtools.git"
  },
  "keywords": [
    "redux",
    "devtools",
    "flux",
    "hot reloading",
    "time travel",
    "live edit"
  ],
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gaearon/redux-devtools/issues"
  },
  "homepage": "https://github.com/gaearon/redux-devtools",
  "devDependencies": {
    "babel": "^5.5.8",
    "babel-core": "^5.6.18",
    "babel-eslint": "^3.1.15",
    "babel-loader": "^5.1.4",
    "eslint": "^0.23",
    "eslint-config-airbnb": "0.0.6",
    "eslint-plugin-react": "^2.3.0",
    "expect": "^1.6.0",
    "isparta": "^3.0.3",
    "mocha": "^2.2.5",
    "rimraf": "^2.3.4"
  },
  "peerDependencies": {
    "redux": "^1.0.0 || 1.0.0-rc"
  },
  "dependencies": {
    "react-mixin": "^1.7.0",
    "react-redux": "^0.9.0",
    "redux": "^1.0.1"
  },
  "readme": "Redux DevTools\n=========================\n\nA live-editing time travel environment for [Redux](https://github.com/rackt/redux).  \n**[See Dan's React Europe talk demoing it!](http://youtube.com/watch?v=xsSnOQynTHs)**\n\n![](http://i.imgur.com/J4GeW0M.gif)\n\n### Features\n\n* Lets you inspect every state and action payload\n* Lets you go back in time by “cancelling” actions\n* If you change the reducer code, each “staged” action will be re-evaluted\n* If the reducers throw, you will see during which action this happened, and what the error was\n* With `persistState()` store enhancer, you can persist debug sessions across page reloads\n* To monitor a part of  the state, you can set a `select` prop on the DevTools component: `<DevTools select={state => state.todos} store={store} monitor={LogMonitor} />`\n\n### Installation\n\n```\nnpm install --save-dev redux-devtools\n```\n\nDevTools is a [store enhancer](http://rackt.github.io/redux/docs/Glossary.html#store-enhancer), which should be added to your middleware stack *after* [`applyMiddleware`](http://rackt.github.io/redux/docs/api/applyMiddleware.html) as `applyMiddleware` is potentially asynchronous. Otherwise, DevTools won’t see the raw actions emitted by asynchronous middleware such as [redux-promise](https://github.com/acdlite/redux-promise) or [redux-thunk](https://github.com/gaearon/redux-thunk).\n\nTo install, firstly import `devTools` into your root React component:\n\n```js\n// Redux utility functions\nimport { compose, createStore, applyMiddleware } from 'redux';\n// Redux DevTools store enhancers\nimport { devTools, persistState } from 'redux-devtools';\n// React components for Redux DevTools\nimport { DevTools, DebugPanel, LogMonitor } from 'redux-devtools/lib/react';\n```\n\nThen, add `devTools` to your store enhancers, and create your store:\n\n```js\nconst finalCreateStore = compose(\n  // Enables your middleware:\n  applyMiddleware(thunk),\n  // Provides support for DevTools:\n  devTools(),\n  // Lets you write ?debug_session=<name> in address bar to persist debug sessions\n  persistState(window.location.href.match(/[?&]debug_session=([^&]+)\\b/)),\n  createStore\n);\n\nconst store = finalCreateStore(reducer);\n```\n\nFinally, include the `DevTools` in your page. You may pass either `LogMonitor` (the default one) or any of the custom monitors described below. For convenience, you can use `DebugPanel` to dock `DevTools` to some part of the screen, but you can put it also somewhere else in the component tree.\n\n```js\nexport default class Root extends Component {\n  render() {\n    return (\n      <div>\n        <Provider store={store}>\n          {() => <CounterApp />}\n        </Provider>\n        <DebugPanel top right bottom>\n          <DevTools store={store} monitor={LogMonitor} />\n        </DebugPanel>\n      </div>\n    );\n  }\n}\n```\n\n[This commit](https://github.com/gaearon/redux-devtools/commit/0a2a97556e252bfad822ca438923774bc8b932a4) should give you an idea about how to add Redux DevTools for your app **but make sure to only apply `devTools()` in development!** In production, this will be terribly slow because actions just accumulate forever. (We'll need to implement a rolling window for dev too.)\n\nFor example, in Webpack, you can use `DefinePlugin` to turn magic constants like `__DEV__` into `true` or `false` depending on the environment, and import and render `redux-devtools` conditionally behind `if (__DEV__)`. Then, if you have an Uglify step before production, Uglify will eliminate dead `if (false)` branches with `redux-devtools` imports. Here is [an example](https://github.com/erikras/react-redux-universal-hot-example/compare/66bf63fb0f23a3c264a5d37c3acb4c047bf0c0c9...c6515236a1def8a3d2bfeb8f6cd6f0ccdb2f9e1b) of adding React DevTools to a project handling the production case correctly.\n\n### Running Examples\n\nYou can do this:\n\n```\ngit clone https://github.com/gaearon/redux-devtools.git\ncd redux-devtools\nnpm install\n\ncd examples/counter\nnpm install\nnpm start\nopen http://localhost:3000\n```\n\nTry clicking on actions in the log, or changing some code inside `examples/counter/reducers/counter`.  \nFor fun, you can also open `http://localhost:3000/?debug_session=123`, click around, and then refresh.\n\nOh, and you can do the same with the TodoMVC example as well.\n\n### Custom Monitors\n\n**You can build a completely custom UI for it** because `<DevTools>` accepts a `monitor` React component prop. The included `LogMonitor` is just an example.\n\n**[I challenge you to build a custom monitor for Redux DevTools!](https://github.com/gaearon/redux-devtools/issues/3)**\n\nSome crazy ideas for custom monitors:\n\n* A slider that lets you jump between computed states just by dragging it\n* An in-app layer that shows the last N states right in the app (e.g. for animation)\n* A time machine like interface where the last N states of your app reside on different Z layers\n* Feel free to come up with and implement your own! Check `LogMonitor` propTypes to see what you can do.\n\nIn fact some of these are implemented already:\n\n#### [redux-devtools-diff-monitor](https://github.com/whetstone/redux-devtools-diff-monitor)\n\n![](http://i.imgur.com/rvCR9OQ.png)\n\n#### [redux-slider-monitor](https://github.com/calesce/redux-slider-monitor)\n\n![](https://camo.githubusercontent.com/d61984306d27d5e0739efc2d57c56ba7aed7996c/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f662e636c2e6c792f6974656d732f3269314c3147316e3161316833793161324f31772f53637265656e2532305265636f7264696e67253230323031352d30382d3034253230617425323030372e3435253230504d2e676966)\n\n#### [redux-devtools-gentest-plugin](https://github.com/lapanoid/redux-devtools-gentest-plugin)\n\n![](https://camo.githubusercontent.com/71452cc55bc2ac2016dc05e4b6207c5777028a67/687474703a2f2f646c312e6a6f78692e6e65742f64726976652f303031302f333937372f3639323130352f3135303731362f643235343637613236362e706e67)\n\n#### Keep them coming!\n\nCreate a PR to add your custom monitor.\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "redux-devtools@1.1.1",
  "dist": {
    "shasum": "677e16f9c9b3ca00d7ca390be391c6be3a743f8d"
  },
  "_from": "redux-devtools@",
  "_resolved": "https://registry.npmjs.org/redux-devtools/-/redux-devtools-1.1.1.tgz"
}
